#12. Вычислить сумму знакопеременного ряда (|х(2n-1)|)/(2n-1)!, где х-матрица ранга к (к и матрица задаются случайным образом),
# n - номер слагаемого. Сумма считается вычисленной, если точность вычислений будет не меньше t знаков после запятой.
# У алгоритма д.б. линейная сложность. Операция умножения –поэлементная. Знак первого слагаемого +.
import random
import numpy as np

# вычисление суммы знакопеременного ряда, используя ряд Маклорена для синуса
def calculate_series(x, t):
    result = 0
    term = x
    n = 1
    epsilon = 10**(-t)

    while abs(term) > epsilon:
        result += term
        term *= -1 * x**2 / ((2 * n) * (2 * n + 1))
        n += 1

    return result

def main():
    t = int(input("Введите точность вычислений t >= 0 (количество знаков после запятой): "))
    while t < 0:
        t = int(input("t должно быть положительным.\nВведите точность вычислений t (t >= 0): "))

    # Генерация случайного ранга матрицы
    k = random.randint(2, 9)

    # Генерация случайной матрицы
    matrix = np.random.uniform(-1, 1, size=(k, k))

    # Вычисление значения ряда
    result = calculate_series(matrix[0, 0], t)

    print(f"Сумма закономерного ряда равна: {result:.{t}f}")

if __name__ == "__main__":
    main()
